require('dotenv').config()
const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const input = require("input"); // npm i input
const TuyaDevice = require('tuyapi');

const {API_ID, API_HASH, PHONE, PASSWORD, DEVICE_ID, KEY_ID} = process.env
const apiId = API_ID;
const apiHash = API_HASH;
const stringSession = new StringSession("");

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Tuya(SmartLife)
const lightDevice = new TuyaDevice({
  id: DEVICE_ID,         //ID –ø—Ä–∏—Å—Ç—Ä–æ—é
  key: KEY_ID,       //–∫–ª—é—á –ø—Ä–∏—Å—Ç—Ä–æ—é
  // ip: 'your-device-ip',         //IP-–∞–¥—Ä–µ—Åa –ø—Ä–∏—Å—Ç—Ä–æ—é optional
});

const manageLight = (alarm, electricity) => {
  if (!alarm && electricity) {
    console.log('–£–º–æ–≤–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ: –≤–º–∏–∫–∞—î–º–æ —Å–≤—ñ—Ç–ª–æ.');
    lightDevice.set({ set: true });
  } else {
    console.log('–£–º–æ–≤–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ: –≤–∏–º–∏–∫–∞—î–º–æ —Å–≤—ñ—Ç–ª–æ.');
    lightDevice.set({ set: false });
  }
};

let alarmState = true, 
    electricityState = true;

(async () => {
  console.log("Loading interactive example...");
  const client = new TelegramClient(stringSession, apiId, apiHash, {
    connectionRetries: 5,
  });
  await client.start({
    // phoneNumber: async () => await input.text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä: "),
    phoneNumber: PHONE,
    password: async () => await input.text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å: "),
    // password: PASSWORD,
    phoneCode: async () =>
      await input.text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥, —è–∫–∏–π –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏: "),
    onError: (err) => console.log(err),
  });
  console.log("You should now be connected.");
  console.log('–£—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!');
  console.log(client.session.save()); // Save this string to avoid logging in again
  await client.sendMessage("me", { message: "Hello!" });
  await client.sendMessage("raketayyy", { message: 'Hello Chanel' });
  await client.sendMessage("+393519629923", { message: 'Hello Chanel' });

  const chat = await client.getEntity('@borik_officially'),
        borik_chat_id = chat.id?.value;
  console.log('–û—Ç—Ä–∏–º–∞–ª–∏ —á–∞—Ç:', chat);

  const power_chat = await client.getEntity('@power_prystolychka'),
        power_chat_id = power_chat.id?.value;
  console.log('–û—Ç—Ä–∏–º–∞–ª–∏ —á–∞—Ç:', power_chat);

  console.log(`BORIK id: ${borik_chat_id}`)
  console.log(`POWER id: ${power_chat_id}`)

  client.addEventHandler((update) => {
    if (update.message && update.message?.peerId?.channelId) {
        const message = update.message.message;
        const chanelId = update.message?.peerId?.channelId;

        console.log(update);
        console.log(`Chanel id: ${chanelId}/ Borik id: ${borik_chat_id}/ Power id: ${power_chat_id}`);
        console.log(chanelId == borik_chat_id || chanelId == power_chat_id ? true : false);

        if (message.includes('üî¥ –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å - –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞!')) {
            console.log('–û—Ç—Ä–∏–º–∞–Ω–æ —Ç—Ä–∏–≤–æ–≥—É! –í–∏–º–∏–∫–∞—î–º–æ —Å–≤—ñ—Ç–ª–æ.');
            alarmState = true;
            client.sendMessage("raketayyy", { message: `${message} \n Chanel id: ${chanelId} \n –û—Ç—Ä–∏–º–∞–Ω–æ —Ç—Ä–∏–≤–æ–≥—É! –í–∏–º–∏–∫–∞—î–º–æ —Å–≤—ñ—Ç–ª–æ.`});
            manageLight(alarmState, electricityState);
        } else if (message.includes('üü¢ –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å - –≤—ñ–¥–±—ñ–π –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏!')) {
            console.log('–í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏! –í–º–∏–∫–∞—î–º–æ —Å–≤—ñ—Ç–ª–æ.');
            alarmState = false;
            client.sendMessage("raketayyy", { message: `${message} \n Chanel id: ${chanelId} \n –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏! –í–º–∏–∫–∞—î–º–æ —Å–≤—ñ—Ç–ª–æ.`});
            manageLight(alarmState, electricityState);
        }

        if (message.includes('‚ö´Ô∏è –©–∞—Å–ª–∏–≤–µ (–õ–µ—Å—ñ –£–∫—Ä–∞—ó–Ω–∫–∏, 14)')) {
          console.log('C–≤—ñ—Ç–ª–∞ –Ω–µ–º–∞! –í–∏–º–∏–∫–∞—î–º–æ —Å–≤—ñ—Ç–ª–æ.');
          electricityState = false;
          client.sendMessage("raketayyy", { message: `${message} \n Chanel id: ${chanelId} \n C–≤—ñ—Ç–ª–∞ –Ω–µ–º–∞! –í–∏–º–∏–∫–∞—î–º–æ —Å–≤—ñ—Ç–ª–æ.`});
          manageLight(alarmState, electricityState);
        } else if (message.includes('üü£ –©–∞—Å–ª–∏–≤–µ (–õ–µ—Å—ñ –£–∫—Ä–∞—ó–Ω–∫–∏, 14)')) {
          console.log('C–≤—ñ—Ç–ª–æ —î! –í–º–∏–∫–∞—î–º–æ —Å–≤—ñ—Ç–ª–æ.');
          electricityState = true;
          client.sendMessage("raketayyy", { message: `${message} \n Chanel id: ${chanelId} \n C–≤—ñ—Ç–ª–æ —î! –í–º–∏–∫–∞—î–º–æ —Å–≤—ñ—Ç–ª–æ.`});
          manageLight(alarmState, electricityState);
        }
    }
  });
})();
